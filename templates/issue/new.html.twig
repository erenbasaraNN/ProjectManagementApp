{% extends 'base.html.twig' %}

{% block title %}New Issue{% endblock %}

{% block body %}
    <h1>Create a new issue</h1>

    {{ form_start(form) }}
    <div class="form-group">
        {{ form_label(form.name, 'Issue Name') }}
        {{ form_widget(form.name, {'attr': {'class': 'form-control'}}) }}
        {{ form_errors(form.name) }}
    </div>

    <div class="form-group">
        {{ form_label(form.description, 'Description') }}
        {{ form_widget(form.description, {'attr': {'class': 'form-control'}}) }}
        {{ form_errors(form.description) }}
    </div>

    <div class="form-group">
        {{ form_label(form.startDate, 'Start Date') }}
        {{ form_widget(form.startDate, {'attr': {'class': 'form-control'}}) }}
        {{ form_errors(form.startDate) }}
    </div>

    <div class="form-group">
        {{ form_label(form.endDate, 'End Date') }}
        {{ form_widget(form.endDate, {'attr': {'class': 'form-control'}}) }}
        {{ form_errors(form.endDate) }}
    </div>

    <div class="form-group">
        {{ form_label(form.status, 'Status') }}
        {{ form_widget(form.status, {'attr': {'class': 'form-control'}}) }}
        {{ form_errors(form.status) }}
    </div>

    <div class="form-group">
        {{ form_label(form.priority, 'Priority') }}
        {{ form_widget(form.priority, {'attr': {'class': 'form-control'}}) }}
        {{ form_errors(form.priority) }}
    </div>

    <div class="form-group">
        {{ form_label(form.assignees, 'Assignees') }}
        {{ form_widget(form.assignees) }}
        {{ form_errors(form.assignees) }}
    </div>

    <div class="form-group">
        {{ form_label(form.project, 'Project') }}
        {{ form_widget(form.project, {'attr': {'class': 'form-control'}}) }}
        {{ form_errors(form.project) }}
    </div>

    <div class="form-group">
        <label for="tags">Tags</label>
        <input id="tags" name="tags" class="form-control" value="{{ form.tags.vars.value|default('') }}">
    </div>

    <button class="btn btn-primary">Save</button>
    {{ form_end(form) }}

    <script>
        // Initialize Tagify for the tags input field
        const tagInput = document.querySelector('input[name="tags"]');
        if (tagInput) {
            fetch('/tags') // Fetch existing tags from server
                .then(response => response.json())
                .then(function(whitelist) {
                    new Tagify(tagInput, {
                        whitelist: whitelist,
                        dropdown: {
                            maxItems: 10,
                            classname: "tags-look",
                            enabled: 0, // Show suggestions on focus
                            closeOnSelect: false
                        }
                    });
                })
                .catch(function(error) {
                    console.error('Error fetching tags:', error);
                });
        }
    </script>
{% endblock %}
